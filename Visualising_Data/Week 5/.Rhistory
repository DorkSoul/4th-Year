# View the first few rows of the data frame
head(data)
# Load the CSV file into a data frame
airport <- read.csv("airports.csv")
# View the first few rows of the data frame
head(data)
# View the first few rows of the data frame
head(airport)
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
ggplot(airport, aes(x=as.factor(DST), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("DST")
Timezone
# View the first few rows of the data frame
head(airport)
# Create a histogram of the altitude of flights
ggplot(airport, aes(x = altitude_ft)) +
geom_histogram(color = "black", fill = "lightblue", bins = 12) +
labs(title = "altitude", x = "altitude", y = "Frequency")
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Add a new column for negative timezones
avg_altitude$NegativeTimezone <- paste0("-", abs(avg_altitude$Timezone))
# Bind the data for positive and negative timezones
combined_data <- rbind(avg_altitude[avg_altitude$Timezone > 0,],
avg_altitude[avg_altitude$Timezone < 0,])
# Group by hour and timezone, add new column for the group
combined_data <- combined_data %>%
group_by(hour, Timezone) %>%
mutate(group = paste0(hour, ifelse(Timezone > 0, "+", "-"), abs(Timezone)))
# Create side-by-side bar chart
ggplot(combined_data, aes(x = group, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Hour-Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create hour column
airport$hour <- airport$Timezone / 24
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Add a new column for negative timezones
avg_altitude$NegativeTimezone <- paste0("-", abs(avg_altitude$Timezone))
# Bind the data for positive and negative timezones
combined_data <- rbind(avg_altitude[avg_altitude$Timezone > 0,],
avg_altitude[avg_altitude$Timezone < 0,])
# Group by hour and timezone, add new column for the group
combined_data <- combined_data %>%
group_by(hour, Timezone) %>%
mutate(group = paste0(hour, ifelse(Timezone > 0, "+", "-"), abs(Timezone)))
# Create side-by-side bar chart
ggplot(combined_data, aes(x = group, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Hour-Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
#Create a side-by-side bar chart
p <- ggplot(avg_altitude, aes(x = Time_Zone_Label, y = altitude_ft, fill = Time_Zone_Label)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Time Zone", y = "Average Altitude") +
ggtitle("Comparison of Average Altitude by Time Zone")
p
# View the first few rows of the data frame
head(airport)
# Create a histogram of the altitude of flights
ggplot(airport, aes(x = altitude_ft)) +
geom_histogram(color = "black", fill = "lightblue", bins = 12) +
labs(title = "altitude", x = "altitude", y = "Frequency")
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
avg_altitude <- airport %>%
group_by(Timezone) %>%
summarize_at(vars(altitude_ft),list(altitude_ft=mean))
avg_altitude
#Create a new column for time zone label
avg_altitude$Time_Zone_Label <- ifelse(avg_altitude$Timezone < 0, "Negative", "Positive")
#Create a side-by-side bar chart
p <- ggplot(avg_altitude, aes(x = Time_Zone_Label, y = altitude_ft, fill = Time_Zone_Label)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Time Zone", y = "Average Altitude") +
ggtitle("Comparison of Average Altitude by Time Zone")
p
airport$hour <- airport$Timezone / abs(airport$Timezone)
#Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
#Add a new column for negative timezones
avg_altitude$NegativeTimezone <- paste0("-", abs(avg_altitude$Timezone))
#Bind the data for positive and negative timezones
combined_data <- rbind(avg_altitude[avg_altitude$Timezone > 0,],
avg_altitude[avg_altitude$Timezone < 0,])
#Create side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour),
group = paste0(hour, ifelse(Timezone > 0, "+", "-"), abs(Timezone)))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
# Set the working directory to where the CSV file is located
setwd("C:/Users/lukeh/Documents/College/4th-Year/Visualising_Data/Week 5")
# Load the CSV file into a data frame
airport <- read.csv("airports.csv")
# View the first few rows of the data frame
head(airport)
# Create a histogram of the altitude of flights
ggplot(airport, aes(x = altitude_ft)) +
geom_histogram(color = "black", fill = "lightblue", bins = 12) +
labs(title = "altitude", x = "altitude", y = "Frequency")
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
avg_altitude <- airport %>%
group_by(Timezone) %>%
summarize_at(vars(altitude_ft),list(altitude_ft=mean))
avg_altitude
#Create a new column for time zone label
avg_altitude$Time_Zone_Label <- ifelse(avg_altitude$Timezone < 0, "Negative", "Positive")
#Create a side-by-side bar chart
p <- ggplot(avg_altitude, aes(x = Time_Zone_Label, y = altitude_ft, fill = Time_Zone_Label)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Time Zone", y = "Average Altitude") +
ggtitle("Comparison of Average Altitude by Time Zone")
p
airport$hour <- airport$Timezone / abs(airport$Timezone)
#Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
#Add a new column for negative timezones
avg_altitude$NegativeTimezone <- paste0("-", abs(avg_altitude$Timezone))
#Bind the data for positive and negative timezones
combined_data <- rbind(avg_altitude[avg_altitude$Timezone > 0,],
avg_altitude[avg_altitude$Timezone < 0,])
#Create side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour),
group = paste0(hour, ifelse(Timezone > 0, "+", "-"), abs(Timezone)))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
#install.packages("highcharter")
data("pokemon", package = "highcharter")
head(pokemon)
library(treemap)
data <- pokemon
# Subset the first 151 rows
pokemon <- pokemon[1:151,]
# Define the hierarchy
hierarchy <- c("type_1", "type_2", "pokemon")
# create treemap
treemap(pokemon,
index=c("type_1", "type_2"),
vSize="weight",
type="index",
width = 1600,
height = 1200)
# Summarize data by type_1 and type_2
type_counts <- aggregate(. ~ type_1 + type_2, data = pokemon, FUN = length)
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
head(combined_data)
combined_data
pos_data
summarize(mean_altitude = mean(altitude_ft))
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
#Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
#Add a new column for negative timezones
avg_altitude$NegativeTimezone <- paste0("-", abs(avg_altitude$Timezone))
#Bind the data for positive and negative timezones
combined_data <- rbind(avg_altitude[avg_altitude$Timezone > 0,],
avg_altitude[avg_altitude$Timezone < 0,])
# Round down the hour column to the nearest integer
combined_data$hour <- floor(combined_data$hour)
#Create side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour),
group = paste0(hour, ifelse(Timezone > 0, "+", "-"), abs(Timezone)))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
pos_data
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
# create treemap
treemap(pokemon,
index=c("type_1", "type_2"),
vSize="weight",
type="index",
width = 1600,
height = 1200)
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
hour
airport$hour
avg_altitude
ggplot(airquality, aes(x=Solar.R)) +
geom_histogram(bins=50)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins=30, fill = "yellow", color = "black", aes(y =..density..)) +
geom_density(col="black", linewidth=2) + theme_bw() +
theme(
legend.position='none')
# Set the working directory to where the CSV file is located
setwd("C:/Users/lukeh/Documents/College/4th-Year/Visualising_Data/Week 5")
# Load the CSV file into a data frame
airport <- read.csv("airports.csv")
# View the first few rows of the data frame
head(airport)
# Create a histogram of the altitude of flights
ggplot(airport, aes(x = altitude_ft)) +
geom_histogram(color = "black", fill = "lightblue", bins = 12) +
labs(title = "altitude", x = "altitude", y = "Frequency")
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
avg_altitude <- airport %>%
group_by(Timezone) %>%
summarize_at(vars(altitude_ft),list(altitude_ft=mean))
avg_altitude
#Create a new column for time zone label
avg_altitude$Time_Zone_Label <- ifelse(avg_altitude$Timezone < 0, "Negative", "Positive")
#Create a side-by-side bar chart
p <- ggplot(avg_altitude, aes(x = Time_Zone_Label, y = altitude_ft, fill = Time_Zone_Label)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Time Zone", y = "Average Altitude") +
ggtitle("Comparison of Average Altitude by Time Zone")
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins=30, fill = "yellow", color = "black", aes(y =..density..)) +
geom_density(col="black", linewidth=2) + theme_bw() +
theme(
legend.position='none')
# Create hour column
airport$hour <- round(airport$Timezone)
airport$hour <- airport$hour / abs(airport$hour)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
avg_altitude
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
pos_data
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
#Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
#Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
#Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
#Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
#Create the side-by-side bar chart with a density line
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
geom_density(aes(group = hour, color = factor(hour))) +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
scale_color_discrete(name = "Hour") +
theme(legend.title = element_blank())
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
avg_altitude
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
pos_data
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins=30, fill = "yellow", color = "black", aes(y =..density..)) +
geom_density(col="black", linewidth=2) + theme_bw() +
theme(
legend.position='none')
ggplot(faithful, aes(x = Timezone)) +
geom_histogram(bins=30, fill = "yellow", color = "black", aes(y =..density..)) +
geom_density(col="black", linewidth=2) + theme_bw() +
theme(
legend.position='none')
# Create a histogram of the altitude of flights
ggplot(airport, aes(x = altitude_ft)) +
geom_histogram(color = "black", fill = "lightblue", bins = 12) +
labs(title = "altitude", x = "altitude", y = "Frequency")
ggplot(airport, aes(x=as.factor(Timezone), y=altitude_ft)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("timezone")
# basic histogram
p <- ggplot(airquality, aes(x=Temp)) +
geom_histogram(bins=10)
p
ggplot(airquality, aes(x=Ozone, na.rm = TRUE)) +
geom_histogram(bins=25)
p <- ggplot(airquality, aes(x=Wind)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
p <- ggplot(airquality, aes(x=Timezone)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
p <- ggplot(airport, aes(x=Timezone)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
# continutity example using a density line of
p <- ggplot(airport, aes(x=altitude_ft)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
p
head(airport)
# continutity example using a density line of
p <- ggplot(airport, aes(x=latitude)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
Timezone
Timezone
# continutity example using a density line of
p <- ggplot(airport, aes(x=Timezone)) +
geom_histogram(bins=20,fill="Yellow", color="Blue") +
geom_freqpoly(binwidth=1,color="Red")
p
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
avg_altitude
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
pos_data
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
# Create the side-by-side bar chart
ggplot(combined_data, aes(x = Timezone, y = mean_altitude, fill = factor(hour))) +
geom_bar(stat = "identity", position = "dodge", color = "grey40") +
ggtitle("Average Altitude by Hour and Timezone") +
xlab("Timezone") +
ylab("Average Altitude") +
scale_fill_discrete(name = "Hour") +
theme(legend.title = element_blank())
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
avg_altitude
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
pos_data
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
# Create hour column and round to the nearest integer
airport$hour <- round(airport$Timezone / abs(airport$Timezone))
# Calculate average altitude by hour and timezone
avg_altitude <- airport %>%
group_by(hour, Timezone) %>%
summarize(mean_altitude = mean(altitude_ft))
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
# Create hour column
airport$hour <- airport$Timezone / abs(airport$Timezone)
# Round hour to the nearest integer
avg_altitude <- airport %>%
group_by(Timezone, hour = round(Timezone * 24)) %>%
summarize(mean_altitude = mean(altitude_ft))
# Split the data into positive and negative timezones
pos_data <- avg_altitude[avg_altitude$Timezone > 0,]
neg_data <- avg_altitude[avg_altitude$Timezone < 0,]
# Combine the positive and negative data into a single data frame
combined_data <- data.frame(Timezone = c(pos_data$Timezone, -neg_data$Timezone),
mean_altitude = c(pos_data$mean_altitude, neg_data$mean_altitude),
hour = c(pos_data$hour, neg_data$hour))
combined_data
airport$hour
avg_altitude
